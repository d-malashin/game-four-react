{"version":3,"sources":["cell/index.js","column/index.js","field/index.js","game/game.js","welcomeScreen/index.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","className","value","Column","column","data","onClick","event","onPress","columnID","map","cell","index","key","cellID","Field","field","onColumnClick","Game","useState","setField","player","setPlayer","restart","axios","post","then","response","currentPlayer","useEffect","setInterval","get","location","state","playerOneName","playerTwoName","winner","alert","to","type","WelcomeScreen","pathname","App","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gVAGaA,G,MAAO,SAACC,GACnB,OACE,0BAAMC,UAAW,qBAAuC,IAAhBD,EAAME,MAAc,aAAgC,IAAhBF,EAAME,MAAc,aAAe,QCDtGC,G,MAAS,SAACH,GAKrB,IAAII,EAASJ,EAAMK,KACnB,OACE,yBAAKJ,UAAU,qBACfK,QAPJ,SAAiBC,GACfP,EAAMQ,QAAQR,EAAMS,YAOfL,EAAOM,KAAI,SAACC,EAAMC,GAAP,OACV,kBAAC,EAAD,CAAMV,MAAOS,EACXE,IAAKD,EACLE,OAAQF,UCZLG,G,MAAQ,SAACf,GACpB,IAAMgB,EAAQhB,EAAMgB,MACpB,OACE,yBAAKf,UAAU,cACZe,EAAMN,KAAI,SAACN,EAAQQ,GAAT,OACT,kBAAC,EAAD,CAAQP,KAAMD,EACZS,IAAKD,EACLJ,QAASR,EAAMiB,cACfR,SAAUG,U,qCCNL,SAASM,EAAKlB,GAAQ,IAAD,EACRmB,mBAAS,IADD,mBAC3BH,EAD2B,KACpBI,EADoB,OAEND,mBAAS,GAFH,mBAE3BE,EAF2B,KAEnBC,EAFmB,KAyBlC,SAASC,IACPC,IAAMC,KAAN,qDAAgEC,MAAK,SAAAC,GACnEP,EAASO,EAAStB,KAAKW,OACS,IAAhCW,EAAStB,KAAKuB,cAAsBN,EAAU,GAAKA,EAAU,MAIjE,OA5BAO,qBAAU,WACRC,aAAY,WACVN,IAAMO,IAAI,wDAAwDL,MAAK,SAAUC,GAC/EP,EAASO,EAAStB,WAEnB,OACF,IAsBEL,EAAMgC,SAASC,MAIlB,yBAAKhC,UAAU,QACb,uBAAGA,UAAU,yBACX,0BAAMA,UAAU,wBAAwBD,EAAMgC,SAASC,MAAMC,cAA7D,KACA,qCACA,0BAAMjC,UAAU,wBAAwBD,EAAMgC,SAASC,MAAME,gBAE/D,uBAAGlC,UAAU,wBAAb,mBAAqDoB,GACrD,kBAAC,EAAD,CAAOL,MAAOA,EAAOC,cA/BzB,SAAcR,GACZe,IACGC,KADH,gEACiEhB,IAC9DiB,MAAK,SAAUC,GACdP,EAASO,EAAStB,KAAKW,OACS,IAAhCW,EAAStB,KAAKuB,cAAsBN,EAAU,GAAKA,EAAU,GACzDK,EAAStB,KAAK+B,SAChBC,MAAM,UAAD,OAAWV,EAAStB,KAAK+B,OAAzB,UACLb,WAwBJ,kBAAC,IAAD,CAAMe,GAAG,KAAKrC,UAAU,oCAAxB,YAGA,4BACEK,QAASiB,EACTgB,KAAK,SACLtC,UAAU,uCAHZ,YAdK,kBAAC,IAAD,CAAUqC,GAAG,M,YCtBTE,MAbf,WACE,OAAO,yBAAKvC,UAAU,kBACpB,wBAAIA,UAAU,mBAAd,WACA,kBAAC,IAAD,CAAMA,UAAU,uCAAuCqC,GAAI,CACzDG,SAAU,QACVR,MAAO,CACLC,cAAe,MACfC,cAAe,SAJnB,cCUWO,MAXf,WACE,OACE,yBAAKzC,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0C,KAAK,IAAIC,UAAWJ,EAAeK,OAAK,IAC/C,kBAAC,IAAD,CAAOF,KAAK,QAAQC,UAAW1B,EAAM2B,OAAK,OCC9BC,QACW,cAA7BC,OAAOf,SAASgB,UAEe,UAA7BD,OAAOf,SAASgB,UAEhBD,OAAOf,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.6f81da48.chunk.js","sourcesContent":["import React from 'react';\nimport './cell.css';\n\nexport const Cell = (props) => {\n  return (\n    <span className={\"game-field__cell \" + (props.value === 1 ? 'player-one' : (props.value === 2 ? 'player-two' : ''))}></span>\n  )\n}","import React from 'react';\nimport { Cell } from '../cell';\nimport './column.css';\n\nexport const Column = (props) => {\nfunction onPress(event) {\n  props.onPress(props.columnID);\n}\n\n  let column = props.data;\n  return (\n    <div className=\"game-field__column\"\n    onClick={onPress}>\n      {column.map((cell, index) => (\n        <Cell value={cell}\n          key={index}\n          cellID={index}\n        />\n      ))}\n    </div>\n  )\n}","import React from 'react';\nimport { Column } from '../column';\nimport './field.css'\n\nexport const Field = (props) => {\n  const field = props.field\n  return (\n    <div className=\"game-field\">\n      {field.map((column, index) => (\n        <Column data={column}\n          key={index}\n          onPress={props.onColumnClick}\n          columnID={index}\n        />\n      ))}</div>\n  )\n}","import React, { useState, useEffect } from \"react\";\nimport { Field } from \"../field\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\nimport './game.css'\n\nexport default function Game(props) {\n  const [field, setField] = useState([]);\n  const [player, setPlayer] = useState(1);\n\n  useEffect(function () {\n    setInterval(function () {\n      axios.get(\"https://a-connect-four-game.herokuapp.com/game-field\").then(function (response) {\n        setField(response.data);\n      });\n    }, 2000);\n  }, []);\n\n  function move(columnID) {\n    axios\n      .post(`https://a-connect-four-game.herokuapp.com/move?column=${columnID}`)\n      .then(function (response) {\n        setField(response.data.field);\n        response.data.currentPlayer === 2 ? setPlayer(1) : setPlayer(2)\n        if (response.data.winner) {\n          alert(`Player ${response.data.winner} wins`);\n          restart();\n        }\n      });\n  }\n\n  function restart() {\n    axios.post(`https://a-connect-four-game.herokuapp.com/restart`).then(response => {\n      setField(response.data.field);\n      response.data.currentPlayer === 2 ? setPlayer(1) : setPlayer(2)\n    });\n  }\n\n  if (!props.location.state) {\n    return <Redirect to=\"/\" />;\n  }\n  return (\n    <div className=\"game\">\n      <p className=\"game__players players\">\n        <span className=\"players__player--one\">{props.location.state.playerOneName} </span>\n        <span>vs </span>\n        <span className=\"players__player--two\">{props.location.state.playerTwoName}</span>\n      </p>\n      <p className=\"game__current-player\">Current player: {player}</p>\n      <Field field={field} onColumnClick={move} />\n      <Link to=\"/#\" className=\"game__button button button--back\">\n        End game\n      </Link>\n      <button\n        onClick={restart}\n        type=\"button\"\n        className=\"game__button button button--restart\"\n      >\n        Restart\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './welcomeScreen.css'\n\nfunction WelcomeScreen() {\n  return <div className=\"welcome-screen\">\n    <h1 className=\"welcome__header\">Welcome</h1>\n    <Link className=\"welcome__button button button--start\" to={{\n      pathname: '/game',\n      state: {\n        playerOneName: 'One',\n        playerTwoName: 'Two'\n      }\n    }}>New game</Link>\n  </div>\n}\n\nexport default WelcomeScreen;","import React from \"react\";\nimport Game from \"./game/game\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport WelcomeScreen from \"./welcomeScreen\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <HashRouter>\n        <Route path=\"/\" component={WelcomeScreen} exact />\n        <Route path=\"/game\" component={Game} exact />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}